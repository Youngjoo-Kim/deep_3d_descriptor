/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef get_descriptors_H
#define get_descriptors_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "python_cpp_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class get_descriptorsIf {
 public:
  virtual ~get_descriptorsIf() {}
  virtual void return_descriptors(std::vector<double> & _return, const std::vector<double> & input) = 0;
  virtual void match_descriptors(std::vector<int32_t> & _return, const std::vector<double> & feature_1, const std::vector<double> & feature_2) = 0;
};

class get_descriptorsIfFactory {
 public:
  typedef get_descriptorsIf Handler;

  virtual ~get_descriptorsIfFactory() {}

  virtual get_descriptorsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(get_descriptorsIf* /* handler */) = 0;
};

class get_descriptorsIfSingletonFactory : virtual public get_descriptorsIfFactory {
 public:
  get_descriptorsIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<get_descriptorsIf>& iface) : iface_(iface) {}
  virtual ~get_descriptorsIfSingletonFactory() {}

  virtual get_descriptorsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(get_descriptorsIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<get_descriptorsIf> iface_;
};

class get_descriptorsNull : virtual public get_descriptorsIf {
 public:
  virtual ~get_descriptorsNull() {}
  void return_descriptors(std::vector<double> & /* _return */, const std::vector<double> & /* input */) {
    return;
  }
  void match_descriptors(std::vector<int32_t> & /* _return */, const std::vector<double> & /* feature_1 */, const std::vector<double> & /* feature_2 */) {
    return;
  }
};

typedef struct _get_descriptors_return_descriptors_args__isset {
  _get_descriptors_return_descriptors_args__isset() : input(false) {}
  bool input :1;
} _get_descriptors_return_descriptors_args__isset;

class get_descriptors_return_descriptors_args {
 public:

  get_descriptors_return_descriptors_args(const get_descriptors_return_descriptors_args&);
  get_descriptors_return_descriptors_args& operator=(const get_descriptors_return_descriptors_args&);
  get_descriptors_return_descriptors_args() {
  }

  virtual ~get_descriptors_return_descriptors_args() throw();
  std::vector<double>  input;

  _get_descriptors_return_descriptors_args__isset __isset;

  void __set_input(const std::vector<double> & val);

  bool operator == (const get_descriptors_return_descriptors_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const get_descriptors_return_descriptors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_descriptors_return_descriptors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class get_descriptors_return_descriptors_pargs {
 public:


  virtual ~get_descriptors_return_descriptors_pargs() throw();
  const std::vector<double> * input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _get_descriptors_return_descriptors_result__isset {
  _get_descriptors_return_descriptors_result__isset() : success(false) {}
  bool success :1;
} _get_descriptors_return_descriptors_result__isset;

class get_descriptors_return_descriptors_result {
 public:

  get_descriptors_return_descriptors_result(const get_descriptors_return_descriptors_result&);
  get_descriptors_return_descriptors_result& operator=(const get_descriptors_return_descriptors_result&);
  get_descriptors_return_descriptors_result() {
  }

  virtual ~get_descriptors_return_descriptors_result() throw();
  std::vector<double>  success;

  _get_descriptors_return_descriptors_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const get_descriptors_return_descriptors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const get_descriptors_return_descriptors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_descriptors_return_descriptors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _get_descriptors_return_descriptors_presult__isset {
  _get_descriptors_return_descriptors_presult__isset() : success(false) {}
  bool success :1;
} _get_descriptors_return_descriptors_presult__isset;

class get_descriptors_return_descriptors_presult {
 public:


  virtual ~get_descriptors_return_descriptors_presult() throw();
  std::vector<double> * success;

  _get_descriptors_return_descriptors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _get_descriptors_match_descriptors_args__isset {
  _get_descriptors_match_descriptors_args__isset() : feature_1(false), feature_2(false) {}
  bool feature_1 :1;
  bool feature_2 :1;
} _get_descriptors_match_descriptors_args__isset;

class get_descriptors_match_descriptors_args {
 public:

  get_descriptors_match_descriptors_args(const get_descriptors_match_descriptors_args&);
  get_descriptors_match_descriptors_args& operator=(const get_descriptors_match_descriptors_args&);
  get_descriptors_match_descriptors_args() {
  }

  virtual ~get_descriptors_match_descriptors_args() throw();
  std::vector<double>  feature_1;
  std::vector<double>  feature_2;

  _get_descriptors_match_descriptors_args__isset __isset;

  void __set_feature_1(const std::vector<double> & val);

  void __set_feature_2(const std::vector<double> & val);

  bool operator == (const get_descriptors_match_descriptors_args & rhs) const
  {
    if (!(feature_1 == rhs.feature_1))
      return false;
    if (!(feature_2 == rhs.feature_2))
      return false;
    return true;
  }
  bool operator != (const get_descriptors_match_descriptors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_descriptors_match_descriptors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class get_descriptors_match_descriptors_pargs {
 public:


  virtual ~get_descriptors_match_descriptors_pargs() throw();
  const std::vector<double> * feature_1;
  const std::vector<double> * feature_2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _get_descriptors_match_descriptors_result__isset {
  _get_descriptors_match_descriptors_result__isset() : success(false) {}
  bool success :1;
} _get_descriptors_match_descriptors_result__isset;

class get_descriptors_match_descriptors_result {
 public:

  get_descriptors_match_descriptors_result(const get_descriptors_match_descriptors_result&);
  get_descriptors_match_descriptors_result& operator=(const get_descriptors_match_descriptors_result&);
  get_descriptors_match_descriptors_result() {
  }

  virtual ~get_descriptors_match_descriptors_result() throw();
  std::vector<int32_t>  success;

  _get_descriptors_match_descriptors_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const get_descriptors_match_descriptors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const get_descriptors_match_descriptors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_descriptors_match_descriptors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _get_descriptors_match_descriptors_presult__isset {
  _get_descriptors_match_descriptors_presult__isset() : success(false) {}
  bool success :1;
} _get_descriptors_match_descriptors_presult__isset;

class get_descriptors_match_descriptors_presult {
 public:


  virtual ~get_descriptors_match_descriptors_presult() throw();
  std::vector<int32_t> * success;

  _get_descriptors_match_descriptors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class get_descriptorsClient : virtual public get_descriptorsIf {
 public:
  get_descriptorsClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  get_descriptorsClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void return_descriptors(std::vector<double> & _return, const std::vector<double> & input);
  void send_return_descriptors(const std::vector<double> & input);
  void recv_return_descriptors(std::vector<double> & _return);
  void match_descriptors(std::vector<int32_t> & _return, const std::vector<double> & feature_1, const std::vector<double> & feature_2);
  void send_match_descriptors(const std::vector<double> & feature_1, const std::vector<double> & feature_2);
  void recv_match_descriptors(std::vector<int32_t> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class get_descriptorsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<get_descriptorsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (get_descriptorsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_return_descriptors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_match_descriptors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  get_descriptorsProcessor(::apache::thrift::stdcxx::shared_ptr<get_descriptorsIf> iface) :
    iface_(iface) {
    processMap_["return_descriptors"] = &get_descriptorsProcessor::process_return_descriptors;
    processMap_["match_descriptors"] = &get_descriptorsProcessor::process_match_descriptors;
  }

  virtual ~get_descriptorsProcessor() {}
};

class get_descriptorsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  get_descriptorsProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< get_descriptorsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< get_descriptorsIfFactory > handlerFactory_;
};

class get_descriptorsMultiface : virtual public get_descriptorsIf {
 public:
  get_descriptorsMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<get_descriptorsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~get_descriptorsMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<get_descriptorsIf> > ifaces_;
  get_descriptorsMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<get_descriptorsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void return_descriptors(std::vector<double> & _return, const std::vector<double> & input) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->return_descriptors(_return, input);
    }
    ifaces_[i]->return_descriptors(_return, input);
    return;
  }

  void match_descriptors(std::vector<int32_t> & _return, const std::vector<double> & feature_1, const std::vector<double> & feature_2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->match_descriptors(_return, feature_1, feature_2);
    }
    ifaces_[i]->match_descriptors(_return, feature_1, feature_2);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class get_descriptorsConcurrentClient : virtual public get_descriptorsIf {
 public:
  get_descriptorsConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  get_descriptorsConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void return_descriptors(std::vector<double> & _return, const std::vector<double> & input);
  int32_t send_return_descriptors(const std::vector<double> & input);
  void recv_return_descriptors(std::vector<double> & _return, const int32_t seqid);
  void match_descriptors(std::vector<int32_t> & _return, const std::vector<double> & feature_1, const std::vector<double> & feature_2);
  int32_t send_match_descriptors(const std::vector<double> & feature_1, const std::vector<double> & feature_2);
  void recv_match_descriptors(std::vector<int32_t> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
